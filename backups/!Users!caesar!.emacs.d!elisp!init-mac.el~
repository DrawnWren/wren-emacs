;; Since the default ls for the Mac isn't so good, I always have the
;; GNU ls version available in =/usr/local/bin/gls=.


(require 'ls-lisp)
(setq ls-lisp-use-insert-directory-program t)
(setq insert-directory-program "/usr/local/bin/gls")

;; Undo and Redo

;; Ligatures in Code

;;   With font that has symbolic ligatures, we can either use a prebuilt
;;   Mac Port (see [[https://lists.gnu.org/archive/html/emacs-devel/2015-08/msg00882.html][this message]]) or [[https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs][use this code]] to set up particular
;;   programming symbols to trigger those symbols.


(if (fboundp 'mac-auto-operator-composition-mode)
    (mac-auto-operator-composition-mode)
  (let ((alist '((33 . ".\\(?:\\(?:==\\)\\|[!=]\\)")
                 (35 . ".\\(?:[(?[_{]\\)")
                 (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                 (43 . ".\\(?:\\(?:\\+\\+\\)\\|\\+\\)")
                 (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                 (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                 (58 . ".\\(?:[:=]\\)")
                 (59 . ".\\(?:;\\)")
                 (60 . ".\\(?:\\(?:!--\\)\\|\\(?:\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[/<=>|-]\\)")
                 (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                 (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                 (63 . ".\\(?:[:=?]\\)")
                 (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                 (94 . ".\\(?:=\\)")
                 (123 . ".\\(?:-\\)")
                 (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                 (126 . ".\\(?:[=@~-]\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-function-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring])))))

;; Dash

;;    The [[http://kapeli.com/][Dash product]] is nice, and [[https://github.com/Kapeli/dash-at-point][this project]] allows Emacs to open
;;    Dash for documentation of anything with a =C-c d= keystroke:


(use-package dash-at-point
  :ensure t
  :init
  (global-set-key (kbd "C-c d") 'dash-at-point-with-docset)
  :config
  (add-to-list 'dash-at-point-mode-alist '(clojure-mode . "clojure"))
  (add-to-list 'dash-at-point-mode-alist '(ruby-mode . "ruby"))
  (add-to-list 'dash-at-point-mode-alist '(python-mode . "python2"))
  (add-to-list 'dash-at-point-mode-alist '(sh-mode . "bash"))
  (add-to-list 'dash-at-point-mode-alist '(emacs-lisp-mode . "elisp")))

;; Notifications

;;   Looking at making some processes a bit more obvious, for instance,
;;   when a command kicked off in the eshell takes too much time, I need
;;   it to beep when it is done. For this, I simply shell out to Mac's
;;   notification center using the [[https://github.com/alloy/terminal-notifier][terminal-notifier]]. To install, do:

;;   #+BEGIN_EXAMPLE
;;   brew install terminal-notifier
;;   #+END_EXAMPLE

;;   The =beep= command can either be typed at the end of a command
;;   (after a semi-colon), or at the beginning, since anything following
;;   is executed first, and the notification follows.


(defun eshell/beep (&rest args)
  "Send a Mac notification message when the command given has
completed."

  (let ((comment (if args
                     (concat "Process has completed: " (car args))
                   "Process has completed.")))
    (if args
        (eshell-plain-command (car args) (cdr args)))

    (shell-command-to-string
     (concat "terminal-notifier -message '"
             comment
             "' -title 'Emacs' -subtitle 'Eshell Process Completed'"
             " -sound default -sender org.gnu.Emacs"))))

;; Skype

;;   I normally mute Skype with some Alfred keystroke running some
;;   AppleScript. However, Emacs will grab all keystrokes before
;;   passing them on, so I need this function:


(defun mute-skype ()
   "Mutes or unmutes Skype via an AppleScript call."
   (interactive)
   (let ((mute-script "tell application \"Skype\"
  if \(send command \"GET MUTE\" script name \"MuteToggler\"\) is equal to \"MUTE ON\" then
    send command \"SET MUTE OFF\" script name \"MuteToggler\"
  else
    send command \"SET MUTE ON\" script name \"MuteToggler\"
  end if
end tell"))
     (progn
       (call-process "osascript" nil nil nil "-ss" "-e" mute-script)
       (message "Skype (un)mute message has been sent."))))

(global-set-key (kbd "C-M-A-m") 'mute-skype)

;; Technical Artifacts

;;   Make sure that we can simply =require= this library.


(provide 'init-mac)
